package paket1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class Main {
	/*
	 * Model-Viev-Controller (MVC) je obrazac dizajna (design pattern) u oblasti veb
	 * razvoja, koji se obično koristi za razvoj korisiničkih interfejsa.
	 * Dizajnerski obrasci su dobro dokazano rešenje za rešavanje specifičnog
	 * problema/zadatka. MVC Počiva na ideji o ponovnoj upotrebi već postojećeg
	 * softverskog koda, olakšavanju razvoja i kasnijem održavanju aplikacionog
	 * softvera metodom razdvajanja na posebne komponente: model, prikaz podataka
	 * (pogled) i kontrolor (upravljač), pri čemu je komponenta za prikaz
	 * informacija odvojena od interakcije korisnika sa tim informacijama.
	 * Podrazumeva da se program ili aplikacija sastoji od modela podataka,
	 * informacija o prezentaciji i kontrolnih informacija. Dakle, primena MVC
	 * obrazca zahteva da sve ove komponente budu razdvojene kao različiti objekti.
	 */

	/*
	 * Osnovna prednost MVC arhitekture je što se razdvajanjem u posebne celine, kod
	 * velikih projekata, na kome može da radi više osoba, omogućava laka izmena
	 * nekog elementa, bez velike intervencije u drugim elementima, kao i ponovno
	 * korišćenje već napravljenih elemenata.
	 */

	/*
	 * MVC arhitektura omogućava da se logika aplikacije odvoji od korisničkog
	 * interfejsa tako što se programski kod organizuje u tri odvojene komponente:
	 * model, prikaz podataka i kontrolor. MVC projektni šablon se sastoji od tri
	 * zasebne, ali međusobno povezane komponente: 1.model — je centralni deo
	 * aplikacije, koja obuhvata promenljivu (dinamičku) strukturu podataka,
	 * direktno upravljanje podacima, logikom i pravilima aplikacije; 2.prikaz,
	 * pogled (view) - bilo koji izlazni prikaz podataka u korisničkom okruženju;
	 * 3.upravljač (controller) — ulazne podatke pretvara u komande koje upravljaju
	 * modelom ili prikazom podataka u korisničkom okruženju.
	 */

	public static void main(String[] args) throws SQLException {
		// Dohvatanje podataka o zaposlenom iz baze podataka na osnovu ID-a zaposlenog
		Zaposleni model = jdbcPodaci();

		// Kreiranje pogleda za ispisivanje detalja o zaposlenom na konzolu
		Pogled pogled = new Pogled();

		// Kreiranje kontrolera za zaposlenog
		Kontroler kontroler = new Kontroler(model, pogled);

		// Ažuriranje pogleda na zaposlenog
		kontroler.updatePogled();

	}

	// Metoda za dohvatanje podataka o zaposlenom iz baze podataka
	/*
	 * metoda jdbcPodaci() je simulacija dohvatanja podataka o
	 * zaposlenom iz baze podataka. Ova metoda se povezuje
	 * sa bazom podataka i dohvata podatke o zaposlenom na osnovu datog
	 * kriterijuma, kao što je ovde ID zaposlenog.
	 */
	private static List<Zaposleni> jdbcPodaci() throws SQLException {

		// Povezivanje sa bazom podataka
		Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3308/firma", "root", "");

		// Kreiranje SQL upita
		String prikaz = "SELECT * FROM zaposleni";
		
		//Objekat za komunikaciju sa bazom
		Statement statement = connection.createStatement();

		//Objekat za skupljanje rezultata - Izvršavanje SQL upita
		ResultSet resultSet = statement.executeQuery(prikaz);

		// Kreiranje objekta Zaposleni na osnovu rezultata upita
		/// Kreiranje liste zaposlenih
		List<Zaposleni> listaZaposlenih = new ArrayList<Zaposleni>();
		
		while (resultSet.next()) {
			String id = resultSet.getString(1);
			String ime = resultSet.getString(2);
			String prezime= resultSet.getString(3);
			String pozicija= resultSet.getString(4);
			String odeljenje= resultSet.getString(5);
			String email=resultSet.getString(6);
		
		// Automatsko dodavanje elemenata
		listaZaposlenih.add(new Zaposleni(id, ime, prezime, pozicija, odeljenje, email));
		}
		// Zatvaranje resursa
		resultSet.close();
		statement.close();
		connection.close();

		return listaZaposlenih;
	}

}
