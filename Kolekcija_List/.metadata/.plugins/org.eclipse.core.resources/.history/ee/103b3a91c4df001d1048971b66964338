package jelena.milivojevic;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Main {

	public static void main(String[] args) {
		/*
		 * Teorijsko objasnjenje List-a: U hijerarhiji kolekcija, interfejs Collection
		 * je koreni interfejs iz koga su izvedeni interfejsi List, Set, Queue.
		 * Interfejs List definise kolekciju u kojoj se elementi mogu ponavljati List je
		 * uređena kolekcija koja je izvedena iz korenog interfejsa Collection.
		 * Karakteristike: 1) Interfejs List obezbeđuje niz metoda za rad sa elementima
		 * liste, rad sa opsegom elemenata liste, pretragu elemenata, itd.
		 * 
		 * 2) Može sadržati duplikate elemenata. Interfejs List definiše kolekciju u
		 * kojoj se elementi mogu ponavljati
		 * 
		 * 3) Kao kod nizova, indeks prvog elementa liste je 0.
		 * 
		 * 4) Za razliku od nizova, elementima se ne može pristupiti koristeći zagrade [
		 * ], već preko odgovarajućih metoda get i set.
		 * 
		 * Nekoliko KLASA implementira interfejs List, od kojih su najšće korišćene dve:
		 * 1. ArrayList - implementira se kao niz promenljive dužine. 2. LinkedList -
		 * LinkedList se implementira kao povezana lista, koja je u osnovi predstavljena
		 * kao vektor parova (element, pokazivač na sledeci).
		 * 
		 * Posto je List kolekcija, to znaci da moze raditi samo nad referentnim tipom
		 * podataka. Primitivni tipovi moraju prvo biti "umotani" u wrapper klase kako
		 * bi imali odlike referentnog tipa.
		 * 
		 * Sintaksa za kreiranje: List <Tip vrednosti> ImeKolekcije = newKlasaKolekcije<
		 * Tip vrednosti>();
		 * 
		 * Prolazak kroz kolekciju List koristi se Iterator (list ili interface).
		 * Iteratori su standardni nacin u Javi da se prodje kroz sve clanove jedne
		 * kolekcije. Iterator je mehanizam koji omogucava da se sekvenicjalno prolazi
		 * kroz clanove kolekcije, pri cemu se izvrsava i odredjena operacija.
		 */

		// PRIMER UPOTREBE kolekcije LIST na primeru njene implementacije kroz
		// ArrayListu:

		// Kreiranje pocetnog niza stringovnog tipa (referentni tip)
		String voce[] = { "Jabuka", "Banana", "Visnja", "Tresnja", "Jagoda", "Limun", "Kivi", "Kruska" };

		// Kreiranje kolekcija
		List<String> ListaVoce = new ArrayList<String>();

		/*
		 * Napomena! Razlika je ako stavimo List na pocetku sinatkse i ArrayList. List
		 * je interfejs, dok je ArrayList samo klasa kolekcije.
		 */

		// Ubaciti sadrzaj iz niza u kolekciju upotrebom for-each petlje:
		for (String s : voce) {
			ListaVoce.add(s);
		}

		// Prolazak kroz listu upotrebom Iteratora
		Iterator<String> iter = ListaVoce.iterator();
		System.out.println("Kolekcija ListaVoce: ");
		// Upotreba metode "hasNext()"
		while (iter.hasNext()) {
			// upotreba metode "next()"
			System.out.println(iter.next());
		}

		// Provera velicine liste - ugradjena metoda size();
		int velicina = ListaVoce.size();
		// - moze ovako jer je size CELOBROJNA VREDNOST
		System.out.println("\nTrenutna duzina: " + velicina);

		// Koriscenje ugradjene metode contains() za proveru da li se element nalazi u
		// listi
		boolean sadrzi = ListaVoce.contains("Kivi");
		// Ispitivanje sadrzaja promenljive:
		if (sadrzi) {
			System.out.println("Trazeni element Kivi SE nalazi u zadatoj kolekciji!");
		} else {
			System.out.println("Trazeni element Kivi se NE nalazi u zadatoj kolekciji!");
		}

		/*
		 * Ugradjena metoda get() vraca element SA ZADATIM INDEXOM. Dakle kaze koji
		 * element se nalazi pod tim indexom. SLuzi za dohvatanje elementa, jer ne
		 * mozemo preko [ ]. Idexiranje uvek krece od 0.
		 */
		String element = ListaVoce.get(2);
		System.out.println("Element sa indexom 2 u kolekciji je: " + element);

		/*
		 * Ugradjena metoda indexOf() vraca index PRVE POJAVE zadatog elementa
		 * kolekcije. AKo lista ne sadrzi taj element vratice -1
		 */
		int pozicija = ListaVoce.indexOf("Tresnja");
		System.out.println("Element Tresnja je na poziciji: " + pozicija);

		/* Metoda toArray() sluzi za konvertovanje kolekcije u niz. */
		// 1.Kreiranje novog niza tako da je duzina niza = kolekcija.velicina
		String niz2[] = new String[ListaVoce.size()];
		// 2.Prebacivanje - pomocu for each petlje
		ListaVoce.toArray(niz2);
		// 3. Prolazenje kroz niz uz pomoc FOR EACH petlje:
		System.out.println("Novi Niz: ");
		for (String s : niz2) {
			System.out.printf("%s ", s);
		}

	}

}
